services:
  # PostgreSQL Database (shared across all services)
  postgres:
    image: ankane/pgvector:latest
    container_name: voca-ai-postgres
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: ${POSTGRES_HOST_AUTH_METHOD}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - voca-ai-network

  # Voca AI Engine (Main API)
  voca-ai-engine:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: voca-ai-engine
    env_file:
      - .env
    environment:
      # Port configuration
      PORT: 5008
      
      # Database configuration
      DATABASE_URL: ${DATABASE_URL}
      POSTGRES_URL: ${POSTGRES_URL}
      POSTGRES_HOST: ${DB_HOST}
      POSTGRES_PORT: ${DB_PORT}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      
      # Application configuration
      APP_ENV: ${APP_ENV}
      DEBUG: ${DEBUG}
      LOG_LEVEL: ${LOG_LEVEL}
      NODE_ENV: ${NODE_ENV}
      
      # CORS configuration
      CORS_ORIGIN: ${CORS_ORIGIN}
      
      # Service URLs
      VOCA_OS_URL: ${VOCA_OS_URL}
      VOCA_CONNECT_URL: ${VOCA_CONNECT_URL}
      VOCA_AI_ENGINE_URL: ${VOCA_AI_ENGINE_URL}
      
      # Rate limiting
      RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW}
      
      # ElizaOS configuration
      SECRET_SALT: ${SECRET_SALT}
    ports:
      - "5008:5008"
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5008/voca-engine/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - voca-ai-network
    restart: unless-stopped

  # Voca OS Service
  voca-os:
    build:
      context: ./services/voca-os
      dockerfile: docker/Dockerfile
    container_name: voca-os
    env_file:
      - .env
    environment:
      # Database configuration
      DATABASE_URL: ${DATABASE_URL}
      POSTGRES_URL: ${POSTGRES_URL}
      
      # Application configuration
      NODE_ENV: ${NODE_ENV}
      LOG_LEVEL: ${LOG_LEVEL}
      
      # OpenAI configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: ${OPENAI_MODEL}
      
      # Google GenAI configuration (deprecated)
      GOOGLE_GENERATIVE_AI_API_KEY: ${GOOGLE_GENERATIVE_AI_API_KEY}
      GOOGLE_SMALL_MODEL: ${GOOGLE_SMALL_MODEL}
      GOOGLE_EMBEDDING_MODEL: ${GOOGLE_EMBEDDING_MODEL}
      
      # ElizaOS configuration
      SECRET_SALT: ${SECRET_SALT}
      
      # Service URLs
      VOCA_AI_ENGINE_URL: ${VOCA_AI_ENGINE_URL}
    ports:
      - "5001:5001"
    volumes:
      - ./services/voca-os/characters:/app/characters
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/voca-os/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - voca-ai-network
    restart: unless-stopped

  # Voca Connect Service
  voca-connect:
    build:
      context: ./services/voca-connect
      dockerfile: docker/Dockerfile
    container_name: voca-connect
    env_file:
      - .env
    environment:
      # Port configuration
      PORT: 5002
      
      # Database configuration
      DATABASE_URL: ${DATABASE_URL}
      POSTGRES_URL: ${POSTGRES_URL}
      
      # Application configuration
      NODE_ENV: ${NODE_ENV}
      LOG_LEVEL: ${LOG_LEVEL}
      
      # Service URLs
      VOCA_AI_ENGINE_URL: ${VOCA_AI_ENGINE_URL}
      VOCA_OS_URL: ${VOCA_OS_URL}
    ports:
      - "5002:5002"
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      voca-ai-engine:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/voca-connect/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - voca-ai-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  voca-ai-network:
    driver: bridge